// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String? // Nullable, as email might not be provided
  username      String          @unique
  password      String
  dateOfBirth   DateTime
  accessLevel   ACCESSLEVEL
  ProfessorInfo ProfessorInfo[]
  StudentInfo   StudentInfo[]
}

model ClassInfo {
  classId     String @id @default(uuid())
  classCode   String
  units       Int
  schedule    String
  description String

  enrollments    Enrollment[]
  GradesTemplate GradesTemplate[]
  CurrentClasses CurrentClasses[]
}

model College {
  collegeId     String          @id @default(uuid())
  college       String
  ProfessorInfo ProfessorInfo[]
  Department    Department[]
}

model Department {
  departmentId     String          @id @default(uuid())
  department       String
  college          College         @relation(fields: [collegeCollegeId], references: [collegeId])
  professorInfo    ProfessorInfo[]
  collegeCollegeId String
}

model StudentInfo {
  studentId    String   @id @default(uuid())
  studentName  String
  studentCode  String
  studentEmail String
  dateOfBirth  DateTime

  userInfo User   @relation(fields: [userId], references: [id])
  userId   String

  enrollments           Enrollment[]
  StudentCurrentClasses StudentCurrentClasses[]
}

model ProfessorInfo {
  profID   String  @id @default(uuid())
  profName String
  email    String?

  userInfo       User             @relation(fields: [userId], references: [id])
  department     Department       @relation(fields: [departmentId], references: [departmentId])
  departmentId   String
  College        College?         @relation(fields: [collegeId], references: [collegeId])
  collegeId      String?
  userId         String
  CurrentClasses CurrentClasses[]
}

model CurrentClasses {
  currentClassId        String                  @id @default(uuid())
  class                 ClassInfo               @relation(fields: [classInfoClassId], references: [classId])
  classInfoClassId      String
  professor             ProfessorInfo           @relation(fields: [professorInfoProfID], references: [profID])
  professorInfoProfID   String
  assignedAt            DateTime                @default(now())
  assignedBy            String
  GradesTemplate        GradesTemplate[]
  StudentCurrentClasses StudentCurrentClasses[]
}

model StudentCurrentClasses {
  id             String         @id @default(uuid())
  
  currentClass   CurrentClasses @relation(fields: [currentClassId], references: [currentClassId])
  currentClassId String
  student        StudentInfo    @relation(fields: [studentInfoStudentId], references: [studentId])
  studentInfoStudentId String

  StudentGrades        StudentGrades[]
}

model Enrollment {
  enrollmentId  String      @id @default(uuid())
  classInfo     ClassInfo   @relation(fields: [classInfoId], references: [classId])
  classInfoId   String
  studentInfo   StudentInfo @relation(fields: [studentInfoId], references: [studentId])
  studentInfoId String
}

model GradesTemplate {
  id         String @id @default(uuid())
  title      String
  percentage Float

  classInfo      CurrentClasses @relation(fields: [currentClassId], references: [currentClassId])
  currentClassId String

  gradeId          String?
  symetricGrade    GradesTemplate[] @relation("GradingInfo")
  Grades           GradesTemplate[] @relation("GradingInfo")
  StudentGrades    StudentGrades[]
  ClassInfo        ClassInfo?       @relation(fields: [classInfoClassId], references: [classId])
  classInfoClassId String?
}

model StudentGrades {
  id    String @id @default(uuid())
  value Float

  GradeTemplate           GradesTemplate        @relation(fields: [gradesTemplateId], references: [id])
  gradesTemplateId        String
  curentStudentClass      StudentCurrentClasses @relation(fields: [studentCurrentClassesId], references: [id])
  studentCurrentClassesId String
}

model ClassroomInfo {
  roomID     String @id @default(uuid())
  roomNumber String
}

enum ACCESSLEVEL {
  ADMIN
  STUDENT
  INSTRUCTOR
  VISITOR
}
